Below is a detailed prompt for Replit to add the specified features to the "Protocol Pro" app in preview mode. The prompt ensures that each feature is implemented individually using mock data and simulated interactions, allowing you to easily remove or disable any feature (e.g., "Voice-Activated Commands") later without affecting the rest of the app. This approach is ideal for preview mode, focusing on a functional prototype without backend dependencies.

---

## Prompt for Replit: Add Features to Protocol Pro (Preview Mode)

You are tasked with enhancing the "Protocol Pro" app in Replit's preview mode by adding the following user and instructor-centric features:

1. Personalized Protocol Suggestions  
2. Simplified Progress Tracking  
3. Voice-Activated Commands  
4. Gamification Elements  
5. Customizable Reminders  
6. Offline Mode  
7. Real-Time Progress Monitoring  
8. Custom Protocol Templates  
9. One-Tap Feedback  
10. Group Challenges  
11. Analytics Without Complexity  

### General Instructions
- **Individual Implementation**: Add each feature as a separate, self-contained module or component in the code. This ensures that any feature can be disabled (e.g., by commenting out its code) or removed without breaking the app.
- **Mock Data**: Use placeholder data (e.g., static text, hardcoded values) and local state instead of real backend integrations or API calls.
- **Preview Mode Focus**: All features should work locally in Replitâ€™s preview mode without requiring external services, API keys, or backend support.
- **Simulated Interactions**: For features like voice commands or reminders, simulate functionality using console logs, alerts, or toast messages.
- **Code Comments**: Include comments in the code to mark the start and end of each featureâ€™s implementation (e.g., `// Start Feature 1: Personalized Protocol Suggestions` and `// End Feature 1`).
- **Design**: Maintain the appâ€™s clean, minimalist design (e.g., similar to the habit-tracking interface) while adding these features.

---

### Features to Add

#### Feature 1: Personalized Protocol Suggestions
- **What to Do**: Add a "Recommended for You" section on the Follower Dashboard to display mock personalized protocol suggestions.
- **How to Implement**:
  - Create a new `<div>` below the progress visuals with the heading: "Recommended for You".
  - Display two static suggestions, e.g., "Morning Stretch Routine" and "Hydration Challenge", each with a short description like "A quick 10-minute stretch to start your day."
  - Add placeholder text above the suggestions: "Based on your goals and past activities" to simulate personalization.
- **Notes**: Use static HTML/CSS for now; this can be commented out later if not needed.

#### Feature 2: Simplified Progress Tracking
- **What to Do**: Enhance habit cards with a visual progress tracker thatâ€™s easy to understand.
- **How to Implement**:
  - Replace numerical streaks (e.g., "4 0") with a row of 5 circles per habit card.
  - Fill circles green (`background-color: green`) for completed days and gray (`background-color: gray`) for missed days.
  - Use CSS to style the circles (e.g., `width: 10px; height: 10px; border-radius: 50%`).
- **Notes**: Apply this to existing habit cards; keep the code in a separate function or component.

#### Feature 3: Voice-Activated Commands
- **What to Do**: Add a mock voice command feature to habit cards.
- **How to Implement**:
  - Add a microphone icon (e.g., a simple SVG or emoji like ðŸŽ¤) next to each habit name.
  - On click, show a toast message or log to the console: "Simulated voice log: 'Logged workout via voice'".
  - No actual voice recognition is required; this is a placeholder.
- **Notes**: Make the icon and its click event a standalone handler for easy removal.

#### Feature 4: Gamification Elements
- **What to Do**: Add a simple "Achievements" section with mock badges.
- **How to Implement**:
  - Replace the "Other" tab in the bottom navigation with an "Achievements" tab.
  - Create an Achievements screen showing two static badges, e.g., "7-Day Streak" (description: "Completed a habit for 7 days") and "First Log" (description: "Logged your first habit").
  - Use colored boxes or placeholder images for badges.
- **Notes**: Keep this tab and screen independent from other navigation elements.

#### Feature 5: Customizable Reminders
- **What to Do**: Allow users to set mock reminders with custom messages.
- **How to Implement**:
  - In the "Settings" tab, add a "Reminders" section with a toggle switch labeled "Enable Reminders".
  - Include a text input for a custom message (e.g., "Time for your cold shower!").
  - When toggled on, simulate a reminder by showing an alert or toast message after 3 seconds with the custom text.
- **Notes**: Use local state for the toggle and message; keep this feature self-contained.

#### Feature 6: Offline Mode
- **What to Do**: Simulate offline functionality with a toggle and indicator.
- **How to Implement**:
  - Add a small icon (e.g., a cloud with a slash) in the top bar to show "Offline" status.
  - In "Settings", add a toggle for "Online/Offline" mode.
  - In "Offline" mode, show a dashboard message: "You are offline. Data will sync when back online."
  - When toggling back to "Online", display "Syncing..." for 2 seconds before clearing it.
- **Notes**: Use local storage or state; isolate this feature in its own module.

#### Feature 7: Real-Time Progress Monitoring (Instructor)
- **What to Do**: Create a simple instructor dashboard to monitor follower progress.
- **How to Implement**:
  - Add a "Followers" tab in the bottom navigation if not present.
  - On the Followers screen, list mock followers with progress bars, e.g., "John - 75%", "Jane - 50%" (static data).
- **Notes**: Use static HTML/CSS; keep this screen separate from other tabs.

#### Feature 8: Custom Protocol Templates (Instructor)
- **What to Do**: Let instructors save and reuse mock protocol templates.
- **How to Implement**:
  - In the "Protocols" tab, add a "Templates" section.
  - Display two mock templates, e.g., "Daily Wellness Plan" with pre-filled data (e.g., "Task: Drink water, Goal: 8 cups").
  - On click, pre-fill the protocol creation form with the template data.
- **Notes**: Store templates in local state; make this removable.

#### Feature 9: One-Tap Feedback (Instructor)
- **What to Do**: Enable instructors to send quick mock feedback.
- **How to Implement**:
  - On the "Followers" screen, add a "Send Feedback" button next to each follower.
  - On click, show a toast message: "Feedback sent: 'Great job!'" (no actual messaging).
- **Notes**: Keep this as a simple button with a mock handler.

#### Feature 10: Group Challenges (Instructor)
- **What to Do**: Allow instructors to create mock group challenges.
- **How to Implement**:
  - In the "Protocols" tab, add a "Create Challenge" button.
  - On click, show a form with fields for challenge name and goal (e.g., "March Fitness Challenge", "Complete 10 tasks").
  - Save and display the challenge on the instructorâ€™s dashboard (static data).
- **Notes**: Use local storage or state; isolate this feature.

#### Feature 11: Analytics Without Complexity (Instructor)
- **What to Do**: Provide basic mock analytics for instructors.
- **How to Implement**:
  - In the "Followers" or "Protocols" tab, add an "Analytics" section.
  - Show static metrics, e.g., "Protocol Popularity: 5/10" and "Average Completion: 60%".
- **Notes**: Use placeholder text or simple CSS bars; keep it independent.

---

### Final Notes for Replit
- **Modularity**: Each feature should be coded as a distinct unit (e.g., separate functions, components, or files) to allow easy disabling or removal. For example, if "Voice-Activated Commands" isnâ€™t feasible later, you can comment out its code without affecting other features.
- **No Backend**: Avoid any backend dependencies; use mock data and local simulations for everything.
- **Testing**: Ensure the app runs smoothly in preview mode after adding each feature.
- **Flexibility**: Design the code so that features can be toggled off or removed by commenting out sections, maintaining app stability.

---

This prompt provides Replit with clear, step-by-step instructions to add each feature individually to "Protocol Pro" in preview mode. By using mock implementations and keeping features modular, you can later disable or remove any feature (like voice entry) without issues, ensuring a flexible and functional prototype.